// assets/js/obsidian-loader.js
document.addEventListener('DOMContentLoaded', function() {
    console.log('Obsidian loader started...');
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–¥–ª—è —Ç–µ–º—ã minima)
    const contentSelectors = [
        '.wrapper main',
        '.page-content',
        '.post-content',
        'main'
    ];
    
    let contentElement = null;
    for (const selector of contentSelectors) {
        contentElement = document.querySelector(selector);
        if (contentElement) break;
    }
    
    if (!contentElement) {
        console.warn('Content element not found');
        return;
    }
    
    convertObsidianLinks(contentElement);
    handleImageEmbeds(contentElement);
    handleBlockEmbeds(contentElement);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–∫–∏-—Å—Å—ã–ª–æ–∫ [[ ]]
function convertObsidianLinks(element) {
    const wikiLinkRegex = /\[\[([^|\]]+)(?:\|([^\]]+))?\]\]/g;
    
    element.innerHTML = element.innerHTML.replace(wikiLinkRegex, function(match, pageName, displayText) {
        const linkText = displayText || pageName;
        const href = convertToUrl(pageName);
        
        return `<a href="${href}" class="wiki-link" data-wiki-page="${pageName}">${linkText}</a>`;
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –ø–æ–º–µ—á–∞–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏
    checkBrokenLinks(element);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ![[ ]]
function handleImageEmbeds(element) {
    const imageEmbedRegex = /!\[\[([^\]]+\.(?:png|jpg|jpeg|gif|svg|webp))\]\]/gi;
    
    element.innerHTML = element.innerHTML.replace(imageEmbedRegex, function(match, imagePath) {
        const fullPath = `/assets/images/${imagePath}`;
        return `<div class="image-embed">
            <img src="${fullPath}" alt="${imagePath}" loading="lazy">
            <div class="image-caption">${imagePath}</div>
        </div>`;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ ![[ ]]
function handleBlockEmbeds(element) {
    const blockEmbedRegex = /!\[\[([^\]]+\.md)(?:\|([^\]]+))?\]\]/gi;
    
    element.innerHTML = element.innerHTML.replace(blockEmbedRegex, function(match, filePath, displayText) {
        const linkText = displayText || filePath.replace('.md', '');
        const href = convertToUrl(filePath.replace('.md', ''));
        
        return `<div class="block-embed">
            <a href="${href}" class="wiki-link block-link">üìÑ ${linkText}</a>
        </div>`;
    });
}

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ URL
function convertToUrl(pageName) {
    return pageName.toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9-]/g, '') + '.html';
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
function checkBrokenLinks(element) {
    const wikiLinks = element.querySelectorAll('.wiki-link');
    
    wikiLinks.forEach(link => {
        const href = link.getAttribute('href');
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        fetch(href, { method: 'HEAD' })
            .then(response => {
                if (!response.ok) {
                    link.classList.add('broken');
                    link.title = '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
                }
            })
            .catch(() => {
                link.classList.add('broken');
                link.title = '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
            });
    });
}